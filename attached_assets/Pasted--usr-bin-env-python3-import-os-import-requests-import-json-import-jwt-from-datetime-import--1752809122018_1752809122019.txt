#!/usr/bin/env python3

import os
import requests
import json
import jwt
from datetime import datetime, timedelta
from flask import request, redirect, url_for, make_response, session
from jose import jwt as jose_jwt, JWTError
import urllib.parse
import secrets
import logging
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

logger = logging.getLogger(__name__)

class OktaSSO:
    """Okta Single Sign-On integration"""
    
    def __init__(self, app):
        self.app = app
        
        # Okta configuration from environment
        self.okta_domain = os.environ.get('OKTA_DOMAIN')
        self.client_id = os.environ.get('OKTA_CLIENT_ID')
        self.client_secret = os.environ.get('OKTA_CLIENT_SECRET')
        self.redirect_uri = os.environ.get('OKTA_REDIRECT_URI')
        
        # Okta endpoints
        self.authorization_endpoint = f"https://{self.okta_domain}/oauth2/default/v1/authorize"
        self.token_endpoint = f"https://{self.okta_domain}/oauth2/default/v1/token"
        self.userinfo_endpoint = f"https://{self.okta_domain}/oauth2/default/v1/userinfo"
        self.jwks_endpoint = f"https://{self.okta_domain}/oauth2/default/v1/keys"
        
        # Cache for JWKS
        self.jwks_cache = None
        self.jwks_cache_time = None
        
    def get_jwks(self):
        """Get and cache Okta's JSON Web Key Set"""
        if (self.jwks_cache and self.jwks_cache_time and 
            datetime.now() - self.jwks_cache_time < timedelta(hours=1)):
            return self.jwks_cache
        
        try:
            response = requests.get(self.jwks_endpoint, timeout=10)
            response.raise_for_status()
            self.jwks_cache = response.json()
            self.jwks_cache_time = datetime.now()
            return self.jwks_cache
        except Exception as e:
            logger.error(f"Failed to fetch JWKS from Okta: {e}")
            return None
    
    def get_authorization_url(self, state=None):
        """Generate Okta authorization URL"""
        params = {
            'client_id': self.client_id,
            'response_type': 'code',
            'scope': 'openid profile email',
            'redirect_uri': self.redirect_uri,
            'state': state or secrets.token_urlsafe(32)
        }
        
        query_string = urllib.parse.urlencode(params)
        return f"{self.authorization_endpoint}?{query_string}"
    
    def exchange_code_for_tokens(self, authorization_code):
        """Exchange authorization code for tokens"""
        data = {
            'grant_type': 'authorization_code',
            'client_id': self.client_id,
            'client_secret': self.client_secret,
            'code': authorization_code,
            'redirect_uri': self.redirect_uri
        }
        
        headers = {'Content-Type': 'application/x-www-form-urlencoded'}
        
        try:
            response = requests.post(self.token_endpoint, data=data, headers=headers, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Token exchange failed: {e}")
            return None
    
    def verify_id_token(self, id_token, access_token=None):
        """Verify Okta ID token and extract user claims - simplified version"""
        try:
            jwks = self.get_jwks()
            if not jwks:
                logger.error("Failed to get JWKS")
                return None
            
            unverified_header = jose_jwt.get_unverified_header(id_token)
            kid = unverified_header.get('kid')
            
            # Find matching key
            key = None
            for jwk in jwks.get('keys', []):
                if jwk.get('kid') == kid:
                    key = jwk
                    break
            
            if not key:
                logger.error(f"No matching key found for kid: {kid}")
                return None
            
            # Simple decode without at_hash verification
            claims = jose_jwt.decode(
                id_token,
                key,
                algorithms=['RS256'],
                audience=self.client_id,
                issuer=f"https://{self.okta_domain}/oauth2/default",
                options={'verify_at_hash': False}
            )
            
            logger.info("ID token verified successfully")
            
            return {
                'sub': claims.get('sub'),
                'email': claims.get('email'),
                'name': claims.get('name', claims.get('email')),
                'groups': claims.get('groups', []),
                'email_verified': claims.get('email_verified'),
                'exp': claims.get('exp'),
                'iat': claims.get('iat')
            }
            
        except Exception as e:
            logger.error(f"ID token verification failed: {str(e)}")
            return None
    
    def get_user_info_from_token(self, access_token):
        """Get additional user info from Okta's userinfo endpoint"""
        headers = {'Authorization': f'Bearer {access_token}'}
        
        try:
            response = requests.get(self.userinfo_endpoint, headers=headers, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            logger.error(f"Failed to get user info: {e}")
            return None
    
    def create_secure_session_token(self, user_claims):
        """Create a secure, minimal session token"""
        session_data = {
            'sub': user_claims.get('sub'),
            'email': user_claims.get('email'),
            'name': user_claims.get('name'),
            'groups': user_claims.get('groups', []),
            'logged_in': True,
            'login_time': datetime.now().isoformat(),
            'exp': int((datetime.now() + timedelta(hours=8)).timestamp())
        }
        
        return jwt.encode(session_data, self.app.config['SECRET_KEY'], algorithm='HS256')
    
    def verify_session_token(self, session_token):
        """Verify and decode session token"""
        try:
            claims = jwt.decode(
                session_token, 
                self.app.config['SECRET_KEY'], 
                algorithms=['HS256']
            )
            return claims
        except jwt.ExpiredSignatureError:
            logger.info("Session token expired")
            return None
        except jwt.InvalidTokenError as e:
            logger.error(f"Invalid session token: {e}")
            return None

# Global variable for the SSO instance
okta_sso = None

def init_okta_sso(app):
    """Initialize Okta SSO with Flask app"""
    global okta_sso
    okta_sso = OktaSSO(app)
    return okta_sso

def okta_login_required(f):
    """Decorator requiring Okta authentication"""
    from functools import wraps
    @wraps(f)
    def decorated_function(*args, **kwargs):
        session_token = request.cookies.get('okta_session')
        
        if not session_token:
            return redirect(url_for('okta_login'))
        
        user_claims = okta_sso.verify_session_token(session_token)
        if not user_claims:
            response = make_response(redirect(url_for('okta_login')))
            response.set_cookie('okta_session', '', expires=0)
            return response
        
        request.current_user = user_claims
        return f(*args, **kwargs)
    
    return decorated_function